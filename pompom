#! /bin/bash

set -o errexit -o nounset -o pipefail

PIDFILE="/tmp/.pom-pid"
STATEFILE="/tmp/.pom-state"
CONFIGFILE="~/.pomconfig"
SELF="$(basename "${0}")"

_cleanup()
{
	echo "quitting pompom"
	rm "${PIDFILE}"
	exit
}

# @todo Is this pointless now?
trap _cleanup SIGTERM

COMMAND="${1:-start}"
COMMANDTYPE="${2:-work}"

_say()
{
	# @todo Add support for OSX say command
	spd-say "${1}" --voice-type "female3"
}

_terminate()
{
	echo "${1}" 1>&2
	exit 1
}

_savepid()
{
	echo "${1}" > "${PIDFILE}"
	echo "Saving pid ${1}"
}

_rmpid()
{
	[[ -e "${PIDFILE}" ]] && rm "${PIDFILE}"
}

_setstate()
{
	cat <<-EOF > "${STATEFILE}"
	OP=${1}
	TIMESTAMP=$(date +%s)
EOF

	[[ "${#}" -eq 2 ]] && echo "REMAINING=${2}" >> "${STATEFILE}"
}

_rmstate()
{
	[[ -e "${STATEFILE}" ]] && rm "${STATEFILE}"
}

# @todo Check for existence of statefile?
_getstate()
{
	[[ -e "${STATEFILE}" ]] && source "${STATEFILE}"
}

# Test for the case where the command has been independently killed but we still
# have the PIDFILE.
#
# This is slightly convoluted, but lets us check for instances of pompom
# which aren't the currently running process. N.B. the grep is also found.
# @todo there must be a better way...
if [[ "$(pgrep -c "${SELF}")" -eq 1 && -e "${PIDFILE}" ]]
then
	echo "Removing pid"
	_rmpid
	_rmstate
fi

# Default intervals are 25 minutes and 5 minutes
WORKINTERVAL=$(( 60 * 25 ))
BREAKINTERVAL=$(( 60 * 5 ))

case "${COMMAND}" in
	start )
		# Check for the case where we have a $PIDFILE but the process is not running.
		# This is because it's been killed by something else and hasn't tidied up.
		[[ -e "${PIDFILE}" ]] && _terminate "${SELF} is already running"

		case "${COMMANDTYPE}" in
			work )
				INTERVAL="${3:-10}"

				_say "start work"
				# @todo Can this now be a nohup?
				(sleep "${INTERVAL}" && "${0}" switch > /dev/null 2>&1) &
				_savepid "${!}"
				_setstate "${COMMANDTYPE}"
				;;
			break )
				INTERVAL="${3:-10}"

				_say "start break"
				(sleep "${INTERVAL}" && "${0}" switch > /dev/null 2>&1) &
				_savepid "${!}"
				_setstate "${COMMANDTYPE}"
				;;
		esac
		exit 0
		;;
	stop )
		# Deal with the paused state first since it's simpler.
		# @todo Are there any flaws with this approach?
		if [[ -e "${STATEFILE}" && ! -e "${PIDFILE}" ]]
		then
			read -p "${SELF} is paused. Are you sure you want to stop it? (y/n) > " C

			if [[ "${C}" =~ ^[yY]$ ]]
			then
				echo "Stopping ${SELF}"
				_rmstate
			else
				echo "Cancelling"
			fi

			exit 0
		fi

		[[ ! -e "${PIDFILE}" ]] && _terminate "${SELF} is not running"
		echo "Stopping ${SELF}"
		kill "$(cat ${PIDFILE})"
		_rmpid
		_rmstate
		exit 0
		;;
  switch )
  	# @todo Switch between states
		[[ ! -e "${PIDFILE}" ]] && _terminate "${SELF} is not running"
		_getstate
		_say "stop ${OP}"

		# This might have to do a bit of a switcheroo.
		# Manually get the current pid, then start the new process, and stop the
		# process with the saved pid afterwards to prevent killing itself.
		OLDPID="$(cat ${PIDFILE})"
		_rmpid
		_rmstate

		# This starts a new pompom process
		sleep 3
		case "${OP}" in
		  work )
		  	"${0}" start break
		  	;;
		  break )
				"${0}" start work
				;;
		esac

		# Kill old pompom process
		kill "${OLDPID}"
		exit 0
  	;;
  pause )
		[[ ! -e "${PIDFILE}" ]] && _terminate "${SELF} is not running"
		echo "Pausing ${SELF}"
		kill "$(cat ${PIDFILE})"
		_rmpid
  	_getstate

  	# @todo This is flawed in the case where we pause and resume multiple times.
  	NOW=$(date +%s)
    case "${OP}" in
    	work )
    		REMAINING=$(( WORKINTERVAL - ( NOW - TIMESTAMP ) ))
    		;;
    	break )
				REMAINING=$(( BREAKINTERVAL - ( NOW - TIMESTAMP ) ))
				;;
    esac

		_setstate "${OP}" "${REMAINING}"
		exit 0
  	;;
	resume )
		[[ -e "${PIDFILE}" ]] && _terminate "${SELF} is already running"
		[[ ! -e "${STATEFILE}" ]] && _terminate "No state exists to resume"
		_getstate

		# @todo We should be replacing TIMESTAMP with REMAINING in state when pausing.
		[[ -z "${REMAINING}" ]] && _terminate "No time remaining set in state"
		echo "Resuming ${OP} with ${REMAINING}s remaining"
		"${0}" start "${OP}" "${REMAINING}"
		exit 0
		;;
	status )
		if [[ -e "${PIDFILE}" ]]
		then
			echo "${SELF} is running"
		else
			echo "${SELF} is not running"
		fi
		exit 0
		;;
	config )
		echo "Config doesn't exist yet" 2>&1
		exit 1
		;;
	* )
		echo "'${1}' is not a valid command" 2>&1
		exit 1
esac
